security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    providers:
        app_user_provider:
            id: App\Modules\Users\Infrastructure\Security\UserProvider
    firewalls:
        register:
            pattern: ^/api/v1/users
            methods: [POST]
            security: false
        login:
            pattern: /
            stateless: true
            provider: app_user_provider
            entry_point: jwt
            json_login:
                check_path: /login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~
#            refresh_jwt:
#                check_path: /api/refresh-token
#            logout:
#                path: api_token_invalidate


    access_control:
#        - { path: /login, roles: PUBLIC_ACCESS }
#        - { path: ^/,       roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
